{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Virtual Network."
      }
    },
    "vNetAddressSpaces": {
      "type": "string",
      "metadata": {
        "description": "The address spaces in CIDR form (e.g. '10.0.0.0/16') that will be assigned to this VNet."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location in which to deploy this virtual network."
      }
    },

    "virtualNetworkTags": {
      "type": "object",
      "metadata": {
        "description": "A hash table containing the label-value pairs with which to tag this virtual network."
      }
    },
    "numberOfSubnets": {
        "type": "int",
        "metadata": {
          "description": "Number of subnets to be added"
        }
      },
    "subnets": {
        "type": "object",
        "metadata": {
          "description": "Properties of the subnets to be added"
        }
      },
    "erGatewayName": {
      "type": "string",
      "defaultValue": "ER-Gateway",
      "metadata": {
        "description": "Express RouteGateway Name"
      }
    },
    "erGatewayPublicIPName": {
      "type": "string",
      "defaultValue": "ER-Gateway-PIP",      
      "metadata": {
        "description": "Aribtary name for public IP resource used for an azure express route gateway"
      }
    },
    "erGatewaySku": {
      "type": "string",
      "defaultValue": "HighPerformance",
      "metadata": {
        "description": "The Sku of the Gateway. This must be one of Standard, HighPerformance, or UltraPerformance. An empty string is accepted for the case of not creating a gateway"
      }
    },
     "GatewaySubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/8",
      "metadata": {
        "description": "Express Route GatewaySubnet Prefix"
      }
    },
    "numberOfNSGs": {
        "type": "int",
        "metadata": {
          "description": "Number of nsgs to be added"
        }
      },
      "networkSecurityGroups": {
        "type": "object",
        "metadata": {
          "description": "Properties of the network security groups to be added"
        }
      }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "gatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/','GatewaySubnet')]",
    "erGatewayType": "ExpressRoute"
    },
  "resources": [
    {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2016-03-30",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('virtualNetworkTags')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                "[parameters('vNetAddressSpaces')]"
                ]
            }
        }
    },   
    {
        "apiVersion": "2017-10-01",
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "name":"[concat(parameters('virtualNetworkName'), '/', parameters('subnets').subnetProperties[copyIndex()].name)]",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
            "[variables('gatewaySubnetRef')]"
        ],
        "properties": {
          "addressPrefix": "[parameters('subnets').subnetProperties[copyIndex()].addressPrefix]"
        },
        "copy": {
            "name":"subnetscopy",
            "count": "[parameters('numberOfSubnets')]"
        }
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(parameters('virtualNetworkName'), '/GatewaySubnet')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('GatewaySubnetPrefix')]"
      }
    },

    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('erGatewayPublicIPName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[parameters('erGatewayName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('erGatewayPublicIPName'))]",
        "[variables('gatewaySubnetRef')]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gatewaySubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('erGatewayPublicIPName'))]"
              }
            },
            "name": "[concat(parameters('erGatewayPublicIPName'), '-Config')]"
          }
        ],
        "sku": {
          "name": "[parameters('erGatewaySku')]",
          "tier": "[parameters('erGatewaySku')]"
        },
        "gatewayType": "[variables('erGatewayType')]"
      }
    },
    {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2018-08-01",
        "name":"[parameters('networkSecurityGroups').nsgProperties[copyIndex()].name]",
        "location": "[parameters('location')]",
        "tags": {},
        "properties": {
            "copy": [
                {
                    "name": "securityRules",
                    "count": "[length(parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules)]",
                    "input": {
                        "name": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyindex('securityrules')].name]",
                        "properties": {
                            "description": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.description]",
                            "protocol": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.protocol]",
                            "sourceAddressPrefix": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.sourceAddressPrefix]",
                            "sourceAddressPrefixes": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.sourceAddressPrefixes]",
                            "destinationAddressPrefix": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.destinationAddressPrefix]",
                            "destinationAddressPrefixes": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.destinationAddressPrefixes]",
                            "sourcePortRange":"[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.sourcePortRange]",
                            "sourcePortRanges":"[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.sourcePortRanges]",
                            "destinationPortRange": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.destinationPortRange]",
                            "destinationPortRanges": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.destinationPortRanges]",
                            "access": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.access]",
                            "priority": "[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.priority]",
                            "direction":"[parameters('networkSecurityGroups').nsgProperties[copyIndex()].securityRules[copyIndex('securityrules')].properties.direction]"
                        }
                    }
                }
            ]
        },
        "copy": {
            "name":"nsgCopy",
            "count": "[parameters('numberOfNSGs')]"
        }
      }
  ]
}